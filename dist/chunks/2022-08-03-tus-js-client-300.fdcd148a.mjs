import { i as createVNode, j as spreadAttributes, F as Fragment } from './astro.9ffe222d.mjs';
import 'node:fs';
import 'node:path/posix';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './_astro_assets.aa647409.mjs';
import 'html-escaper';
import 'fs';
import 'path';
import 'node:worker_threads';
import 'os';
import 'url';
import 'module';
import 'worker_threads';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>tus is a protocol based on HTTP for resumable file uploads. Resumable here means that an interrupted upload can carry on without re-uploading already uploaded data again. An interruption may happen willingly, if the user wants to pause while switching to another workspace, or by accident in case of a network issue or server outage. When resumability is implemented with automatic retries, the user does not need to notice there was an interruption. Since HTTP/1.1 such a resumability is available for file downloads already but not for file uploads as tus offers.</p>\n<p><a href=\"https://github.com/tus/tus-js-client/\">tus-js-client</a> is the official client implementation for <a href=\"/protocols/resumable-upload.html\">the tus protocol</a> in JavaScript. It not only supports <strong>web browsers</strong>, but can also be used in <strong>Node.js</strong>, <strong>React Native</strong>, and <strong>Apache Cordova</strong> applications.</p>\n<p>This release addresses a few cases of odd-behavior from tus-js-client to make it more developer-friendly. We also drop support for older environments and add handy feature for handling parallel uploads and file-based streams.</p>\n<h2 id=\"new-features\">New features</h2>\n<ul>\n<li>\n<p><strong>Add support for Parallel Uploads for <code>fs.ReadStream</code></strong><br>\nIn the previous <a href=\"https://tus.io/blog/2020/05/04/tus-js-client-200.html\">major release of tus-js-client v2.0.0</a> we announced that it now supports parallel upload requests using the <a href=\"https://tus.io/protocols/resumable-upload.html#concatenation\">Concatenation extension</a>. When enabled, an input file will be split into multiple equally sized parts which are uploaded in parallel. After all requests are finished, the parts will be stitched together on the server-side to produce the original file. The motivation behind this feature is to allow better utilization of network connections and available bandwidth. See the <a href=\"https://github.com/tus/tus-js-client/blob/v3.0.0/docs/api.md#paralleluploads\"><code>parallelUploads</code> documentation</a> for more details.\nIn this release, support for parallel uploads has been extended to also cover <code>fs.ReadStream</code> as an input type. You can use it like so:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">path</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"my/file.txt\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">file</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fs.</span><span style=\"color: #D2A8FF\">createReadStream</span><span style=\"color: #C9D1D9\">(path);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">upload</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> tus.</span><span style=\"color: #D2A8FF\">Upload</span><span style=\"color: #C9D1D9\">(file, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  endpoint: </span><span style=\"color: #A5D6FF\">\"https://tusd.tusdemo.net/files/\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  parallelUploads: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n</li>\n<li>\n<p><strong>Add <code>parallelUploadBoundaries</code> option</strong><br>\nIf parallel uploads are enabled, this setting can be used to have parts of different size distributions or parts with specific boundaries to satisfy server requirements. See the <a href=\"https://github.com/tus/tus-js-client/blob/v3.0.0/docs/api.md#paralleluploadboundaries\"><code>parallelUploadBoundaries</code> documentation</a> for more details.</p>\n</li>\n<li>\n<p><strong>Automatically obtain file size for <code>fs.ReadStream</code></strong><br>\ntus-js-client has supported uploading an instance of <code>fs.ReadStream</code> directly for a long time. However, you always had to manually specify the file size, like this:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">path</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"my/file.txt\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">file</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fs.</span><span style=\"color: #D2A8FF\">createReadStream</span><span style=\"color: #C9D1D9\">(path);</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> { </span><span style=\"color: #79C0FF\">size</span><span style=\"color: #C9D1D9\"> } </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fs.</span><span style=\"color: #D2A8FF\">statSync</span><span style=\"color: #C9D1D9\">(path);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">upload</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> tus.</span><span style=\"color: #D2A8FF\">Upload</span><span style=\"color: #C9D1D9\">(file, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  endpoint: </span><span style=\"color: #A5D6FF\">\"https://tusd.tusdemo.net/files/\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  uploadSize: size,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<p>The <code>uploadSize</code> option is now optional and can be left out:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">path</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"my/file.txt\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">file</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fs.</span><span style=\"color: #D2A8FF\">createReadStream</span><span style=\"color: #C9D1D9\">(path);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">upload</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> tus.</span><span style=\"color: #D2A8FF\">Upload</span><span style=\"color: #C9D1D9\">(file, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  endpoint: </span><span style=\"color: #A5D6FF\">\"https://tusd.tusdemo.net/files/\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<p>tus-js-client will automatically obtain the file size from disk.</p>\n</li>\n</ul>\n<h2 id=\"bug-fixes\">Bug fixes</h2>\n<ul>\n<li><strong>Fix resuming of streams in Node.js</strong><br>\nPreviously, if you wanted to upload a non-file-based stream using tus-js-client and paused the upload using <code>abort()</code>, the resumption using <code>start()</code> could cause a hanging upload. <a href=\"https://github.com/tus/tus-js-client/issues/275\">This issue</a> has been resolved and resuming properly works now.</li>\n<li><strong>Fix fingerprint removal after successful upload</strong><br>\nIf the <code>removeFingerprintOnSuccess</code> option was used together with <code>uploadDataDuringCreation</code>, the fingerprint was not always properly removed from the URL storage. <a href=\"https://github.com/tus/tus-js-client/issues/397\">This issue</a> has been fixed.</li>\n</ul>\n<h2 id=\"breaking-changes\">Breaking changes</h2>\n<p>The main behavior of tus-js-client and the vast majority of its API surface stay the same. However, the following breaking changes were necessary:</p>\n<ul>\n<li><strong>Drop support for Node.js v12 and earlier</strong><br>\nOnly Node.js v14 or newer are fully supported and tested for compatibility with tus-js-client from now own. Earlier versions may work, but we don’t guarantee or support it.</li>\n<li><strong>Drop support for Internet Explorer</strong><br>\nMany dependencies have dropped support for Internet Explorer, and so do we now. tus-js-client will not be compatible with any version of Internet Explorer from now on. Please note that we still support all other browsers as before.</li>\n<li><strong>Rename the exported <code>HttpStack</code> class to <code>DefaultHttpStack</code></strong><br>\ntus-js-client allows you to provide a custom HTTP stack using which requests are sent out. If not configured, tus-js-client will use a default implementation depending on the environment. Previously, this class was exported under the <code>HttpStack</code> name. This class shared the name with the <code>HttpStack</code> interface and <a href=\"https://github.com/tus/tus-js-client/pull/241\">caused a collision</a> when using our TypeScript definitions. As such, we have renamed the <code>HttpStack</code> class (not the interface) to <code>DefaultHttpStack</code>. Please update your references if you are using this class.</li>\n<li><strong>Do not close streams for <code>abort()</code> calls</strong><br>\nPreviously, if you provided a <code>Reader</code> or <code>Readable</code> stream to tus-js-client and called the <code>abort()</code> method, tus-js-client would stop the upload and close the stream. This is problematic because the upload cannot be resumed later because one cannot read from the stream anymore. From now on, tus-js-client will not close the stream anymore to allow later resuming using <code>start()</code> again. If you do not want to continue the upload, you must close the stream now on your own.\nPlease note that tus-js-client still closes the stream if the upload was completed successfully (i.e. <code>onSuccess</code> has been invoked), as it has done in previous releases.</li>\n<li><strong>Store upload URL provided by <code>uploadUrl</code></strong><br>\nIf you create a new upload, its upload URL will be stored in the URL storage by tus-js-client, so it can later be retrieved using <code>tus.Upload#findPreviousUploads()</code> for resuming the uploads. This behavior is controlled by the <a href=\"https://github.com/tus/tus-js-client/blob/v3.0.0/docs/api.md#storefingerprintforresuming\"><code>storeFingerprintForResuming</code> option</a>. However, not all servers allow clients to create uploads on their own. Sometimes, the server will supply the client with a pre-defined upload URL to use with the <code>uploadUrl</code> option (e.g. the Vimeo API). Previously, these upload URLs were not stored in the URL storage and could therefore not be retrieved for later resumption.\nThis release changes this behavior, so that these URLs are also stored by default, and you can use <code>tus.Upload#findPreviousUploads()</code> to retrieve them.\nIf you do not want to store the upload URL, you can revert to the old behavior by disabling it:\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">upload</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> tus.</span><span style=\"color: #D2A8FF\">Upload</span><span style=\"color: #C9D1D9\">(file, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  uploadUrl: </span><span style=\"color: #A5D6FF\">\"https://tusd.tusdemo.net/files/...\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  storeFingerprintForResuming: </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"try-it\">Try it</h2>\n<p>If you’d like to try it out, we have updated our <a href=\"/demo.html\">demo</a> to use tus-js-client v3.0.0 as well. The code for it can be found <a href=\"https://github.com/tus/tus.io/blob/main/assets/javascripts/upload-demo.js\">here</a>. Do leave a comment there how it went!</p>\n<p>Finally, we want to thank everyone who helped to make this release happen! If you also want to contribute, you can find our open source code at <a href=\"https://github.com/tus\">GitHub</a>. If you don’t know where to start or have other questions, feel free to <a href=\"/support.html\">contact us</a>!</p>");

				const frontmatter = {"title":"Major release: tus-js-client v3.0.0","author":"acconut","date":"2022-08-03T00:00:00.000Z","slug":"2022/08/03/tus-js-client-300/"};
				const file = "/Users/nick/dev/transloadit/tus.io/src/content/blog/2022-08-03-tus-js-client-300.md";
				const url = undefined;
				function rawContent() {
					return "\ntus is a protocol based on HTTP for resumable file uploads. Resumable here means that an interrupted upload can carry on without re-uploading already uploaded data again. An interruption may happen willingly, if the user wants to pause while switching to another workspace, or by accident in case of a network issue or server outage. When resumability is implemented with automatic retries, the user does not need to notice there was an interruption. Since HTTP/1.1 such a resumability is available for file downloads already but not for file uploads as tus offers.\n\n[tus-js-client](https://github.com/tus/tus-js-client/) is the official client implementation for [the tus protocol](/protocols/resumable-upload.html) in JavaScript. It not only supports **web browsers**, but can also be used in **Node.js**, **React Native**, and **Apache Cordova** applications.\n\nThis release addresses a few cases of odd-behavior from tus-js-client to make it more developer-friendly. We also drop support for older environments and add handy feature for handling parallel uploads and file-based streams.\n\n## New features\n\n- **Add support for Parallel Uploads for `fs.ReadStream`**<br />\n  In the previous [major release of tus-js-client v2.0.0](https://tus.io/blog/2020/05/04/tus-js-client-200.html) we announced that it now supports parallel upload requests using the [Concatenation extension](https://tus.io/protocols/resumable-upload.html#concatenation). When enabled, an input file will be split into multiple equally sized parts which are uploaded in parallel. After all requests are finished, the parts will be stitched together on the server-side to produce the original file. The motivation behind this feature is to allow better utilization of network connections and available bandwidth. See the [`parallelUploads` documentation](https://github.com/tus/tus-js-client/blob/v3.0.0/docs/api.md#paralleluploads) for more details.\n  In this release, support for parallel uploads has been extended to also cover `fs.ReadStream` as an input type. You can use it like so:\n\n  ```js\n  const path = \"my/file.txt\";\n  const file = fs.createReadStream(path);\n\n  const upload = new tus.Upload(file, {\n    endpoint: \"https://tusd.tusdemo.net/files/\",\n    parallelUploads: 3,\n  });\n  ```\n\n- **Add `parallelUploadBoundaries` option**<br />\n  If parallel uploads are enabled, this setting can be used to have parts of different size distributions or parts with specific boundaries to satisfy server requirements. See the [`parallelUploadBoundaries` documentation](https://github.com/tus/tus-js-client/blob/v3.0.0/docs/api.md#paralleluploadboundaries) for more details.\n- **Automatically obtain file size for `fs.ReadStream`**<br />\n  tus-js-client has supported uploading an instance of `fs.ReadStream` directly for a long time. However, you always had to manually specify the file size, like this:\n\n  ```js\n  const path = \"my/file.txt\";\n  const file = fs.createReadStream(path);\n  const { size } = fs.statSync(path);\n\n  const upload = new tus.Upload(file, {\n    endpoint: \"https://tusd.tusdemo.net/files/\",\n    uploadSize: size,\n  });\n  ```\n\n  The `uploadSize` option is now optional and can be left out:\n\n  ```js\n  const path = \"my/file.txt\";\n  const file = fs.createReadStream(path);\n\n  const upload = new tus.Upload(file, {\n    endpoint: \"https://tusd.tusdemo.net/files/\",\n  });\n  ```\n\n  tus-js-client will automatically obtain the file size from disk.\n\n## Bug fixes\n\n- **Fix resuming of streams in Node.js**<br />\n  Previously, if you wanted to upload a non-file-based stream using tus-js-client and paused the upload using `abort()`, the resumption using `start()` could cause a hanging upload. [This issue](https://github.com/tus/tus-js-client/issues/275) has been resolved and resuming properly works now.\n- **Fix fingerprint removal after successful upload**<br />\n  If the `removeFingerprintOnSuccess` option was used together with `uploadDataDuringCreation`, the fingerprint was not always properly removed from the URL storage. [This issue](https://github.com/tus/tus-js-client/issues/397) has been fixed.\n\n## Breaking changes\n\nThe main behavior of tus-js-client and the vast majority of its API surface stay the same. However, the following breaking changes were necessary:\n\n- **Drop support for Node.js v12 and earlier**<br />\n  Only Node.js v14 or newer are fully supported and tested for compatibility with tus-js-client from now own. Earlier versions may work, but we don't guarantee or support it.\n- **Drop support for Internet Explorer**<br />\n  Many dependencies have dropped support for Internet Explorer, and so do we now. tus-js-client will not be compatible with any version of Internet Explorer from now on. Please note that we still support all other browsers as before.\n- **Rename the exported `HttpStack` class to `DefaultHttpStack`**<br />\n  tus-js-client allows you to provide a custom HTTP stack using which requests are sent out. If not configured, tus-js-client will use a default implementation depending on the environment. Previously, this class was exported under the `HttpStack` name. This class shared the name with the `HttpStack` interface and [caused a collision](https://github.com/tus/tus-js-client/pull/241) when using our TypeScript definitions. As such, we have renamed the `HttpStack` class (not the interface) to `DefaultHttpStack`. Please update your references if you are using this class.\n- **Do not close streams for `abort()` calls**<br />\n  Previously, if you provided a `Reader` or `Readable` stream to tus-js-client and called the `abort()` method, tus-js-client would stop the upload and close the stream. This is problematic because the upload cannot be resumed later because one cannot read from the stream anymore. From now on, tus-js-client will not close the stream anymore to allow later resuming using `start()` again. If you do not want to continue the upload, you must close the stream now on your own.\n  Please note that tus-js-client still closes the stream if the upload was completed successfully (i.e. `onSuccess` has been invoked), as it has done in previous releases.\n- **Store upload URL provided by `uploadUrl`**<br />\n  If you create a new upload, its upload URL will be stored in the URL storage by tus-js-client, so it can later be retrieved using `tus.Upload#findPreviousUploads()` for resuming the uploads. This behavior is controlled by the [`storeFingerprintForResuming` option](https://github.com/tus/tus-js-client/blob/v3.0.0/docs/api.md#storefingerprintforresuming). However, not all servers allow clients to create uploads on their own. Sometimes, the server will supply the client with a pre-defined upload URL to use with the `uploadUrl` option (e.g. the Vimeo API). Previously, these upload URLs were not stored in the URL storage and could therefore not be retrieved for later resumption.\n  This release changes this behavior, so that these URLs are also stored by default, and you can use `tus.Upload#findPreviousUploads()` to retrieve them.\n  If you do not want to store the upload URL, you can revert to the old behavior by disabling it:\n  ```js\n  const upload = new tus.Upload(file, {\n    uploadUrl: \"https://tusd.tusdemo.net/files/...\",\n    storeFingerprintForResuming: false,\n  });\n  ```\n\n## Try it\n\nIf you'd like to try it out, we have updated our [demo](/demo.html) to use tus-js-client v3.0.0 as well. The code for it can be found [here](https://github.com/tus/tus.io/blob/main/assets/javascripts/upload-demo.js). Do leave a comment there how it went!\n\nFinally, we want to thank everyone who helped to make this release happen! If you also want to contribute, you can find our open source code at [GitHub](https://github.com/tus). If you don't know where to start or have other questions, feel free to [contact us](/support.html)!\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"new-features","text":"New features"},{"depth":2,"slug":"bug-fixes","text":"Bug fixes"},{"depth":2,"slug":"breaking-changes","text":"Breaking changes"},{"depth":2,"slug":"try-it","text":"Try it"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
