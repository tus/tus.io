import { i as createVNode, j as spreadAttributes, F as Fragment } from './astro.9ffe222d.mjs';
import 'node:fs';
import 'node:path/posix';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './_astro_assets.aa647409.mjs';
import 'html-escaper';
import 'fs';
import 'path';
import 'node:worker_threads';
import 'os';
import 'url';
import 'module';
import 'worker_threads';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>As time progresses, we share ever larger media files from our phones and desktops. More than often, however, complications arise during this process. Whether it is through servers misbehaving or mobile users switching to a WiFi connection, the outcome is the same: ‘upload interrupted’.</p>\n<p>This is by itself a negative user experience, but it becomes even worse when it happens in the middle of a 2GB upload on a slow connection. And of course, the longer an upload takes, the more exposed it is to poor connections. A failed upload will then have to be retried from the start, if the user even bothers with it at all.</p>\n<p>With media files growing larger and networks remaining fragile, it is clear that we need a better solution to handle uploading.</p>\n<h3 id=\"resumable-uploads\">Resumable Uploads</h3>\n<p>Even though certain decent network libraries already implement retries, these do not give the option to resume at the point where the upload was previously interrupted and then only transfer the remaining bytes. Furthermore, these network libraries often require additional user input in order to retry failed uploads. If retries were initiated behind the scenes, the user might not even notice he had an interrupted connection, as the total duration of the upload would barely be impacted.</p>\n<p>There are also many areas in the world where connections are quite poor. In such places, restarting an upload from the beginning usually means that the user only gets to transmit the first 20% of his file, before the connection breaks again. Thus, resuming an upload exactly where it left off is the <em>only</em> way a large file will ever be uploaded in these cases.</p>\n<p>From this, it is apparent that we <em>need</em> resumable uploads and therefore we are proud to present tus, the protocol that aims to offer solutions to all of the problems listed above.</p>\n<p>In addition to this, tus has redesigned the process of uploading in such a way that multiple file parts can be sent simultaneously. Using tus not only makes uploading a lot more reliable, but also much faster.</p>\n<h3 id=\"havent-other-companies-already-implemented-this\">Haven’t other companies already implemented this?</h3>\n<p>Yes, but we see this as another part of the problem. While there are many implementations that offer resumable uploads, they all solve it in a different way. They are either bound to one language or use case. They are also not as thorough or interoperable as we would like, because they all speak different dialects. Some implementations are supported by others, but that is as far as compatibility goes.</p>\n<p>This is not remotely how an <em>open web</em> should work.</p>\n<p>Dropbox, Vimeo, Google and AWS all have their own API’s for uploading chunks. Some companies describe their API, but make choices that aren’t suitable for general use and they certainly don’t offer a platform to contribute improvements. If we want to support anything beyond their use case, we are on our own again. This further increases fragmentation and leaves resumable file uploads as a luxury, only to be enjoyed by a few large companies, while it should be the standard method that benefits everyone.</p>\n<h3 id=\"tus\">tus</h3>\n<p>tus is a protocol that is fully community-owned. It has been <a href=\"https://github.com/tus/tus-resumable-upload-protocol\">developed</a> using nothing but GitHub and Markdown, and was fueled by a profound motivation - shared by a few passionate high profile developers - to solve this problem once and for all.</p>\n<p>Over the course of two years, we have received suggestions from people working at\n<a href=\"https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Avayam\">Vimeo</a>,\n<a href=\"https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Atechnoweenie\">GitHub</a>,\n<a href=\"https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3ABaughn\">Google</a>,\nand from the author of\n<a href=\"https://github.com/tus/tus.io/issues?q=mentions%3Ahintjens\">ØMQ</a>, as well as from the co-authors of\n<a href=\"https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Areschke\">HTTP/1.1</a> and\n<a href=\"https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Afelixge\">Node.js</a>.</p>\n<p>It has not always been easy to find consensus and at times we hit deadlocks. In the past few months, however, we have made considerable progress and we are now excited to announce a finalized version 1.0. tus is ready for the world to use.</p>\n<h3 id=\"how-does-it-work\">How does it work?</h3>\n<p>Let’s take a quick look at an example of a simple communication between a client and a server speaking tus 1.0:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\"># Client:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> POST /files HTTP/1.1</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Host: tus.example.org</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Tus-Resumable: 1.0.0</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Content-Length: 0</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Upload-Length: 100</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Upload-Metadata: filename d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\"># Server:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> HTTP/1.1 201 Created</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> Location: http://tus.example.org/files/24e533e02ec3bc40c387f1a0e460e216</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> Tus-Resumable: 1.0.0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\"># Client:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> PATCH /files/24e533e02ec3bc40c387f1a0e460e216 HTTP/1.1</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Host: tus.example.org</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> Tus-Resumable: 1.0.0</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Content-Type: application/offset+octet-stream</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Content-Length: 30</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> Upload-Offset: 0</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> [first 30 bytes]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\"># Server:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> HTTP/1.1 204 No Content</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> Tus-Resumable: 1.0.0</span></span></code></pre>\n<p>Since tus is a layer on top of HTTP, it is easy to reason about, inspect, extend and deploy in existing projects as well as infra.</p>\n<h3 id=\"a-streamlined-core-with-optional-extensions\">A streamlined core with optional extensions</h3>\n<p>The core of the protocol is lightweight, yet well documented and it defines the way in which communication should take place. In addition to this, tus offers extensions such as Checksum, Expiration and Concatenation, which support different use cases and are opt-in.</p>\n<p>To highlight one of the protocol’s extensions: Concatenation allows you to split a 100GB file in 20 parts of 5GB, upload them in parallel, and uses the tus server to stitch them together again. This makes uploads much faster by utilizing the available bandwidth more efficiently. An extra advantage of this method is that individual chunks are considered regular tus uploads, which benefit from all of tus’ features (retries, checksums, etc.).</p>\n<h3 id=\"implementations\">Implementations</h3>\n<p>Our aim is to support all major languages and platforms. Alongside the protocol\nwe also develop many implementations, so that developers can have drop-in self-hosted resumable\nfile uploads at zero cost.</p>\n<p>We currently support the following platforms:</p>\n<ul>\n<li><a href=\"https://github.com/tus/tusd\">Server in Go</a></li>\n<li><a href=\"https://github.com/tus/tus-node-server\">Server in ES2015 JavaScript for Node.js</a></li>\n<li><a href=\"https://github.com/tus/tus-js-client\">Client in JavaScript</a></li>\n<li><a href=\"https://github.com/tus/TUSKit\">Client for iOS</a></li>\n<li><a href=\"https://github.com/tus/tus-android-client\">Client for Android</a></li>\n<li><a href=\"https://github.com/tus/tus-java-client\">Client in Java</a></li>\n</ul>\n<p>Additionally, there are many community provided <a href=\"/implementations.html\">implementations</a> in languages such as:\n<a href=\"https://github.com/picocandy/rubytus\">Ruby</a>,\n<a href=\"https://github.com/vayam/tuspy\">Python</a> and\n<a href=\"https://github.com/leblanc-simon/php-tus\">PHP</a>.</p>\n<p>Quality implementations of the protocol licensed MIT might be adopted in the <a href=\"https://github.com/tus\">tus organization on GitHub</a>, making you an official contributor to the project.</p>\n<h3 id=\"releasing-version-10\">Releasing version 1.0</h3>\n<p>Today we are proud to announce that we have launched version 1.0 on GitHub by merging <a href=\"https://github.com/tus/tus-resumable-upload-protocol/pull/57\">the 1.0 pull request</a>.</p>\n<p>We consider the protocol to be stable and ready for production!</p>\n<p>The full protocol is published online <a href=\"/protocols/resumable-upload.html\">here</a>.</p>\n<h3 id=\"early-adopters\">Early Adopters</h3>\n<p>Early adopters <a href=\"https://vimeo.com\">Vimeo</a> and Transloadit have already announced they will use tus 1.0 as their main protocol for uploading.</p>\n<p>tus is initiated and funded by <a href=\"https://transloadit.com\">Transloadit</a>, but it is community owned and this will never change.</p>\n<p>We encourage anybody who deals with file uploads to have have a look at tus and to consider using it for your next release.</p>\n<h3 id=\"special-thanks\">Special Thanks</h3>\n<p>It has taken us the better part of three years and we have had to overcome many obstacles along the way. It is in great part thanks to <a href=\"/about.html\">these people</a> that tus is able to push out a stable release today. A special\nword of thanks goes out to the talented people that have been instrumental in getting us to where we are today: <a href=\"https://felixge.de\">Felix</a>, <a href=\"https://github.com/vayam\">Naren</a> and <a href=\"https://transloadit.com/about#marius\">Marius</a>. We couldn’t have done tus without you!</p>\n<p>Discuss on <a href=\"https://news.ycombinator.com/item?id=10574364\">Hacker News</a></p>");

				const frontmatter = {"title":"tus 1.0 - Changing the future of file uploading","author":"kvz","redirect_from":"/blog/2015/11/16/tus.1.0/","date":"2015-11-16T00:00:00.000Z","slug":"2015/11/16/tus.1.0/"};
				const file = "/Users/nick/dev/transloadit/tus.io/src/content/blog/2015-11-16-tus.1.0.md";
				const url = undefined;
				function rawContent() {
					return "\nAs time progresses, we share ever larger media files from our phones and desktops. More than often, however, complications arise during this process. Whether it is through servers misbehaving or mobile users switching to a WiFi connection, the outcome is the same: 'upload interrupted'.\n\nThis is by itself a negative user experience, but it becomes even worse when it happens in the middle of a 2GB upload on a slow connection. And of course, the longer an upload takes, the more exposed it is to poor connections. A failed upload will then have to be retried from the start, if the user even bothers with it at all.\n\nWith media files growing larger and networks remaining fragile, it is clear that we need a better solution to handle uploading.\n\n### Resumable Uploads\n\nEven though certain decent network libraries already implement retries, these do not give the option to resume at the point where the upload was previously interrupted and then only transfer the remaining bytes. Furthermore, these network libraries often require additional user input in order to retry failed uploads. If retries were initiated behind the scenes, the user might not even notice he had an interrupted connection, as the total duration of the upload would barely be impacted.\n\nThere are also many areas in the world where connections are quite poor. In such places, restarting an upload from the beginning usually means that the user only gets to transmit the first 20% of his file, before the connection breaks again. Thus, resuming an upload exactly where it left off is the _only_ way a large file will ever be uploaded in these cases.\n\nFrom this, it is apparent that we _need_ resumable uploads and therefore we are proud to present tus, the protocol that aims to offer solutions to all of the problems listed above.\n\nIn addition to this, tus has redesigned the process of uploading in such a way that multiple file parts can be sent simultaneously. Using tus not only makes uploading a lot more reliable, but also much faster.\n\n### Haven't other companies already implemented this?\n\nYes, but we see this as another part of the problem. While there are many implementations that offer resumable uploads, they all solve it in a different way. They are either bound to one language or use case. They are also not as thorough or interoperable as we would like, because they all speak different dialects. Some implementations are supported by others, but that is as far as compatibility goes.\n\nThis is not remotely how an _open web_ should work.\n\nDropbox, Vimeo, Google and AWS all have their own API's for uploading chunks. Some companies describe their API, but make choices that aren't suitable for general use and they certainly don't offer a platform to contribute improvements. If we want to support anything beyond their use case, we are on our own again. This further increases fragmentation and leaves resumable file uploads as a luxury, only to be enjoyed by a few large companies, while it should be the standard method that benefits everyone.\n\n### tus\n\ntus is a protocol that is fully community-owned. It has been [developed](https://github.com/tus/tus-resumable-upload-protocol) using nothing but GitHub and Markdown, and was fueled by a profound motivation - shared by a few passionate high profile developers - to solve this problem once and for all.\n\nOver the course of two years, we have received suggestions from people working at\n[Vimeo](https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Avayam),\n[GitHub](https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Atechnoweenie),\n[Google](https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3ABaughn),\nand from the author of\n[ØMQ](https://github.com/tus/tus.io/issues?q=mentions%3Ahintjens), as well as from the co-authors of\n[HTTP/1.1](https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Areschke) and\n[Node.js](https://github.com/tus/tus-resumable-upload-protocol/issues?q=mentions%3Afelixge).\n\nIt has not always been easy to find consensus and at times we hit deadlocks. In the past few months, however, we have made considerable progress and we are now excited to announce a finalized version 1.0. tus is ready for the world to use.\n\n### How does it work?\n\nLet's take a quick look at an example of a simple communication between a client and a server speaking tus 1.0:\n\n```bash\n# Client:\n> POST /files HTTP/1.1\n> Host: tus.example.org\n> Tus-Resumable: 1.0.0\n> Content-Length: 0\n> Upload-Length: 100\n> Upload-Metadata: filename d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==\n\n# Server:\n< HTTP/1.1 201 Created\n< Location: http://tus.example.org/files/24e533e02ec3bc40c387f1a0e460e216\n< Tus-Resumable: 1.0.0\n\n# Client:\n> PATCH /files/24e533e02ec3bc40c387f1a0e460e216 HTTP/1.1\n> Host: tus.example.org\n< Tus-Resumable: 1.0.0\n> Content-Type: application/offset+octet-stream\n> Content-Length: 30\n> Upload-Offset: 0\n>\n> [first 30 bytes]\n\n# Server:\n< HTTP/1.1 204 No Content\n< Tus-Resumable: 1.0.0\n```\n\nSince tus is a layer on top of HTTP, it is easy to reason about, inspect, extend and deploy in existing projects as well as infra.\n\n### A streamlined core with optional extensions\n\nThe core of the protocol is lightweight, yet well documented and it defines the way in which communication should take place. In addition to this, tus offers extensions such as Checksum, Expiration and Concatenation, which support different use cases and are opt-in.\n\nTo highlight one of the protocol's extensions: Concatenation allows you to split a 100GB file in 20 parts of 5GB, upload them in parallel, and uses the tus server to stitch them together again. This makes uploads much faster by utilizing the available bandwidth more efficiently. An extra advantage of this method is that individual chunks are considered regular tus uploads, which benefit from all of tus' features (retries, checksums, etc.).\n\n### Implementations\n\nOur aim is to support all major languages and platforms. Alongside the protocol\nwe also develop many implementations, so that developers can have drop-in self-hosted resumable\nfile uploads at zero cost.\n\nWe currently support the following platforms:\n\n- [Server in Go](https://github.com/tus/tusd)\n- [Server in ES2015 JavaScript for Node.js](https://github.com/tus/tus-node-server)\n- [Client in JavaScript](https://github.com/tus/tus-js-client)\n- [Client for iOS](https://github.com/tus/TUSKit)\n- [Client for Android](https://github.com/tus/tus-android-client)\n- [Client in Java](https://github.com/tus/tus-java-client)\n\nAdditionally, there are many community provided [implementations](/implementations.html) in languages such as:\n[Ruby](https://github.com/picocandy/rubytus),\n[Python](https://github.com/vayam/tuspy) and\n[PHP](https://github.com/leblanc-simon/php-tus).\n\nQuality implementations of the protocol licensed MIT might be adopted in the [tus organization on GitHub](https://github.com/tus), making you an official contributor to the project.\n\n### Releasing version 1.0\n\nToday we are proud to announce that we have launched version 1.0 on GitHub by merging [the 1.0 pull request](https://github.com/tus/tus-resumable-upload-protocol/pull/57).\n\nWe consider the protocol to be stable and ready for production!\n\nThe full protocol is published online [here](/protocols/resumable-upload.html).\n\n### Early Adopters\n\nEarly adopters [Vimeo](https://vimeo.com) and Transloadit have already announced they will use tus 1.0 as their main protocol for uploading.\n\ntus is initiated and funded by [Transloadit](https://transloadit.com), but it is community owned and this will never change.\n\nWe encourage anybody who deals with file uploads to have have a look at tus and to consider using it for your next release.\n\n### Special Thanks\n\nIt has taken us the better part of three years and we have had to overcome many obstacles along the way. It is in great part thanks to [these people](/about.html) that tus is able to push out a stable release today. A special\nword of thanks goes out to the talented people that have been instrumental in getting us to where we are today: [Felix](https://felixge.de), [Naren](https://github.com/vayam) and [Marius](https://transloadit.com/about#marius). We couldn't have done tus without you!\n\nDiscuss on [Hacker News](https://news.ycombinator.com/item?id=10574364)\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"resumable-uploads","text":"Resumable Uploads"},{"depth":3,"slug":"havent-other-companies-already-implemented-this","text":"Haven’t other companies already implemented this?"},{"depth":3,"slug":"tus","text":"tus"},{"depth":3,"slug":"how-does-it-work","text":"How does it work?"},{"depth":3,"slug":"a-streamlined-core-with-optional-extensions","text":"A streamlined core with optional extensions"},{"depth":3,"slug":"implementations","text":"Implementations"},{"depth":3,"slug":"releasing-version-10","text":"Releasing version 1.0"},{"depth":3,"slug":"early-adopters","text":"Early Adopters"},{"depth":3,"slug":"special-thanks","text":"Special Thanks"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
