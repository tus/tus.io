---
import { octokit, user, repos } from '@/lib/octokit'
import { uniqBy } from 'lodash-es'

const collaborators = (
  await Promise.all(
    repos
      .map((repo) => [
        octokit.paginate(
          octokit.rest.issues.listForRepo,
          {
            owner: user,
            repo: repo,
            per_page: 100,
            state: 'all',
          },
          (response) => response.data.map((d) => d.user)
        ),
        octokit.paginate(
          octokit.rest.issues.listCommentsForRepo,
          {
            owner: user,
            repo: repo,
            per_page: 100,
            sort: 'created',
            direction: 'desc',
          },
          (response) => response.data.map((d) => d.user)
        ),
      ])
      .flat()
  )
)
  .flat()
  .filter((d) => d.type !== 'Bot')

const uniqueCollaborators = uniqBy(collaborators, 'id')
---

<h2>Collaborators ({uniqueCollaborators.length})</h2>

<p>People commenting on tus</p>

<div class="collaborators">
  {
    uniqueCollaborators.map((c) => (
      <a
        key={c.id}
        href={c.html_url}
        target="_blank"
        rel="noopener noreferrer"
        class="avatar"
        aria-label={`GitHub profile of ${c.login}`}
      >
        <img
          src={c.avatar_url}
          width="460"
          height="460"
          alt={`Avatar of ${c.login}`}
          loading="lazy"
          decoding="async"
        />
      </a>
    ))
  }
</div>

<style>
  .collaborators {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    column-gap: var(--space6);
    row-gap: var(--space5);
  }

  .avatar {
    display: block;
    height: 4rem;
    width: 4rem;
    border-radius: 999px;
    overflow: hidden;
    border: 2px solid white;
    box-shadow: 0 0 var(--space2) var(--gray8);
  }

  .avatar img {
    width: 100%;
    height: auto;
    object-fit: cover;
    object-position: center;
  }
</style>
